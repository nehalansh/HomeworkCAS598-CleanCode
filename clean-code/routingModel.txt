clear;clc;

% Channel parameters
n = 0.015; % Mannin's n
s0 = 0.006; % Channel slope 
L = 8000; % Length of the channel [ft]
B = 100; % Widtth of the channel [ft]
P = B; % Wetted perimeter
beta = 0.6;
alpha = (n*P^(2/3)/1.49/sqrt(s0))^beta;

% Discretization
dx = 1000; % [ft] 
N_cell = L/dx; % Number of spatial cells
T_sim = 120; % Total simultion time [min]
dt = 1; % !!may need to convert to [second]!! try 0.5,3,6,12 [min] 
nT = T_sim/dt; % Number of time steps

% Create variable to store Q
Q_linear = zeros(nT+1,N_cell+1);%including intial time step

%assign initial condition
Q_linear(1,:) = 2000; %[cfs]

%create boundary condition
T_initial = 0:1:T_sim;
Q_bc = 2000 + (6000/2)*(1 - cos(2*pi*T_initial/T_sim));

% Assgin boundary and inital condition
Q_linear(:,1) = Q_bc; % [cfs]
Q_nonlinear = Q_linear; % [cfs]

% Linear scheme %
% Loop over time
for it = 2:nT+1
    % Loop over space
    for ix = 2:N_cell+1
        numerator = dt*60/dx*Q_linear(it,ix-1)+alpha*beta*Q_linear(it-1,ix)*(Q_linear(it-1,ix)/2+Q_linear(it,ix-1)/2)^(0.6-1);
        denominator = dt*60/dx + alpha*beta*(Q_linear(it-1,ix)/2+Q_linear(it,ix-1)/2)^(beta-1);
        Q_linear(it,ix) = numerator/denominator;
    end
end

% Nonlinear scheme %
options = optimset('TolX',10^-6); % Set up the stop criteria for nonlinear solver
% Loop over time
for it = 2:nT+1
    % Loop over space
    for ix = 2:N_cell+1
        c = Q_nonlinear(it,ix-1);
        d = Q_nonlinear(it-1,ix);
        f = @(x)dt*60/dx*x + alpha*x^beta - dt*60/dx*c - alpha*d^beta;
        x_inital = Q_linear(it,ix);%use linear solution as inital guess
        Q_nonlinear(it,ix) = fzero(f,x_inital,options);
    end
end

% Plot Q at different location
figure
ylim([0 8100]);
plot(0:dt:T_sim,Q_linear(:,1),'r-');hold on
plot(0:dt:T_sim,Q_linear(:,2:end),'r-');
xlabel('Time (mins)');
ylabel('Q (cfs)');

% Plot nonlinear solution
figure
ylim([0 8100]);
plot(0:dt:T_sim,Q_nonlinear(:,1),'b-');hold on
plot(0:dt:T_sim,Q_nonlinear(:,2:end),'b-');
xlabel('Time (mins)');
ylabel('Q (cfs)');
exportgraphics(gcf,'Fig8.jpg')

%%
% Plot discharge along river at different time
figure(2)
ylim([0 8100]);
t_plot = 0:20:120; % [0,30,60,90,120];
for it = 1:length(t_plot)
    plot(0:dx:L,Q_nonlinear(t_plot(it)/dt+1,:));hold on
    pause(0.2)
end
xlabel('Distance (ft)');
ylabel('Q(cfs)');
legend({'t=0 min','20','40','60','80','100','120'});
exportgraphics(gcf,'Fig9.jpg')

%%
% Animation of flood wave moving along river
figure(3)
ylim([0 8100]);
for it = 1:length(Q_nonlinear)
    plot(0:dx:L,Q_linear(it,:));
    ylim([0 8100]);
    xlabel('Distance (ft)');ylabel('Q(cfs)');
    pause(0.1);
end
